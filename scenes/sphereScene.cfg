# Configuration of the camera
camera :
{
    # The resolution of the image
    resolution = {
        width = 1920;
        height = 1080;
    };
    # The number of ray per pixel
    samples = 1000;
    # The position of the camera
    look_from = {
        x = 13.0;
        y = 2.0;
        z = 3.0;
    };
    # The point the camera is looking at
    look_at = {
        x = 0.0;
        y = 0.0;
        z = 0.0;
    };
    # The up vector of the camera
    up = {
        x = 0.0;
        y = 1.0;
        z = 0.0;
    };
    # The field of view of the camera
    fieldOfView = 40.0; # In degree
    # The aspect ratio of the camera
    aspectRatio = {
        width = 16.0;
        height = 9.0;
    };
    # The aperture of the camera
    aperture = 0.1;
    # The distance to the focus point
    diskToFocus = 10.0;
};

# Primitives in the scene
primitives :
{
    # Create a sphere the move from center0 to center1 between time0 and time1
    movingSpheres = (
        # Create a jumping Sphere
        {
            center0 = {
                x = 0.9;
                y = 0.2;
                z = 0.9;
            };
            center1 = {
                x = 0.9;
                y = 0.5;
                z = 0.9;
            };
            time0 = 0.0;
            time1 = 1.0;
            radius = 0.2;
            material = {
                name = "Lambertian";
                color = {
                    r = 0.5;
                    g = 0.5;
                    b = 0.5;
                };
            };
        }
    );

    limitedCylinder = (
        {
            center = {
                x = 5.0;
                y = 2.0;
                z = 1.0;
            };
            radius = 1.0;
            height = 5.0;
            axis = {
                x = 0.0;
                y = 1.0;
                z = 0.0;
            };
            rotation = 30.0;
            material = {
                name = "Lambertian";
                color = {
                    r = 0.8;
                    g = 0.2;
                    b = 0.2;
                };
            };
        }
    );

    spheres = (
        # The ground
        {
            x = 0.0;
            y = -1000.0;
            z = 0.0;
            r = 1000.0;
            material = {
                name = "Lambertian";
                texture = {
                    name = "ChessTexture";
                    type = "color";
                    colorA = {
                        r = 0.2;
                        g = 0.3;
                        b = 0.1;
                    };
                    colorB = {
                        r = 0.9;
                        g = 0.9;
                        b = 0.9;
                    };
                };
            };
        },
        # Big Glasses Sphere
        {
            x = 0.0;
            y = 1.0;
            z = 0.0;
            r = 1.0;
            material = {
                name = "Dielectric";
                refIdx = 1.5;
            };
        },
        # Big Mirror Sphere
        {
            x = -4.0;
            y = 1.0;
            z = 0.0;
            r = 1.0;
            material = {
                name = "Metal";
                color = {
                    r = 0.7;
                    g = 0.6;
                    b = 0.5;
                };
                fuzz = 0.0;
            };
        },
        # Big Classic Lambertian Sphere
        {
            x = 4.0;
            y = 1.0;
            z = 0.0;
            r = 1.0;
            material = {
                name = "Lambertian";
                color = {
                    r = 0.4;
                    g = 0.2;
                    b = 0.1;
                };
            };
        }
    );
};

# List of Lights
lights :
{
    ambient = 1.0;
    diffuse = 0.0;

    # List of PointLights
    point = (
        {
            x = 190;
            y = 90;
            z = 190;
            r = 90;
            material = {
                name = "none";
            }
        } # Create a Sphere with a radius of 90 in default value and AMaterial() for material;
    );
}
